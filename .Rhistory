b<-makeCacheMatrix(a)
b
source("~/R/cachematrix.R")
a <- matrix(c(1,2,3,4), 2, 2)
a
q <- makeCacheMatrix(a)
q
source("~/R/cachematrix.R")
q <- makeCacheMatrix(a)
q
source("~/R/cachematrix.R")
q <- makeCacheMatrix(a)
q
?select
library(dplyr)
?select
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
q()
library(swirl)
swirl()
install.packages("Rcpp")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
library(swirl)
swirl()
library(dplyr)
bye
q
0
bye
info()
bye()
swirl()
bye()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = count)
gather(students2, key = sex_class, value = count, -grade)
students2
res <- gather(students2, key = sex_class, value = count, -grade)
res
?separate
separate(res, col = sex_class, into = c(sex, class))
separate(res, col = sex_class, into = c("sex", "class"))
?chain
submit()
swirl()
submit(manual = T)
source("script1.R")
source("script1.R")
source("script1")
getwd
getwd()
# out ?chain, which will bring up the relevant documentation.
# You can also look at the Examples section at the bottom
# of ?gather and ?separate.
#
# The main idea is that the result to the left of %>%
# takes the place of the first argument of the function to
# the right. Therefore, you OMIT THE FIRST ARGUMENT to each
# function.
#
students2 %>%
gather( sex_class, count, -grade) %>%
separate( sex_class, c("sex", "class")) %>%
print
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
print
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
submit
submit()
swirl()
bye()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_gms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours =8, minutes = 34)
this_moment
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours + 17, minutes + 34)
depart <- update(depart, hours = hours + 17, minutes + 34)
depart <- update(depart, hours = hours(depart) + 17, minutes = minutes(depart) 34)
depart <- update(depart, hours = hours(depart) + 17, minutes = minutes(depart) +34)
?update
depart <- update(depart, hours = 19 + 17, minutes = 32 +34)
depart <- update(depart, hours =  17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz("Asia/Hong_King")
with_tz(arrive, "Asia/Hong_King")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), "Asia/Singapore")
last_time <- with_tz(mdy("June 17, 2008"), "Singapore")
last_time <- with_tz(mdy("June 17, 2008", "Singapore"), "Asia/Hong_Kong")
last_time <- with_tz(mdy("June 17, 2008", tz = "Singapore"), "Asia/Hong_Kong")
last_time <- with_tz(mdy("June 17, 2008", tz = "Singapore"))
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
submit()
?submit
students3
?gather
submit
submit()
?submit
swirl()
?submit
?submit
students3
?submit
?submit
?submit
?submit
?submit
?spread
?submit
?spread
?submit
?spread
?submit
?submit
?spread
?submit
?submit
?submit
?submit
?submit
extract_numeric("class5")
?mutate
?submit
students4
?submit
?submit
?submit
?submit
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
?submit
?separate
sat %>%
select(-contains(total)) %>%
gather(part_sex, count, -score_range) %>%
print()
sat %>%
select(-contains(total)) %>%
print
?select
sat %>%
select(-contains(_total)) %>%
sat %>%
select(-contains("total")) %>%
print
?submit
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
print()
?separate
?submit
?submit
?group_by
?submit
install.packages(“onion”)
require(onion)
data(bunny)
p3d(bunny,theta=3,phi=104,box=FALSE)
install.packages('onion')
library(onion)
data("bunny")
p3d(bunny,theta=3,phi=104,box=FALSE)
library(swirl)
swirl
swirl()
quantil(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrang(top_counts, count)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, des(count)
)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
unique(quantile(pack_sum$count, probs = 0.99))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
swirl()
?submit
?submit
?submit
View(result3)
select(1:4) %>%
print
cran
names(cran)
select(-1:3, -5:7, -9) %>%
print
select(ip_id, country, package, size) %>%
print
select(cran, 1:3)
select(cran, X)
select(cran, X, ip_id)
cran %>%
select(ip_id, country, package, size) %>%
print
print
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
?submit
?submit
?submit
?submit
exit
bye
bye()
setwd("~/R/course5")
library(dplyr)
library(data.table)
df <- read.csv("activity.csv")
aggregate(steps ~ interval, FUN = max, data = df)
df
tail(df)
head(df)
summary(df)
library(ggplot2)
?ts.plot
ts.plot(df$steps, df$interval, type = "l", gpars = list(xlab = "time", ylab = "steps", lty = c(1:3)))
ts.plot(df$steps, df$interval, type = "l")
15840/288
2356/61
2355/61
head(df)
filter(df, date = "2012-10-01")
filter(df, date == "2012-10-01")
filter(df, date == "2012-10-02")
?summarize
summarize(df, interval())
summarize(df, interval
)
group_by(df, interval)
summariz(group_by(df, interval), sum(steps, na.rm = T))
summarize(group_by(df, interval), sum(steps, na.rm = T))
tmp <- summarize(group_by(df, interval), sum(steps, na.rm = T))
tail(tmp)
nrows(tmp)
nrow(tmp)
tmp
dim(tmp)
summary(tmp)
sum(df$step, na.rm = T)
sum(tmp$`sum(steps, na.rm = T)`)
tmp <- summarize(group_by(df, interval), mean(steps, na.rm = T))
summary(tmp)
10927/206.170
summary(df)
filter(tmp, tmp$`mean(steps, na.rm = T)` == 206.170)
filter(tmp, tmp$`mean(steps, na.rm = T)` > 206)
png("instructions_fig/plot2.png", width = 480, height = 480)
plot(tmp, type = "l",
main = "Average across all Days",
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken")
dev.off()
setwd("~/R/course5/RepData_PeerAssessment1")
png("instructions_fig/plot2.png", width = 480, height = 480)
plot(tmp, type = "l",
main = "Average across all Days",
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken")
dev.off()
tmp <- summarize(group_by(df, interval), nrow(steps, na.rm = T))
2304/288
filter(df, interval == 0)
filter(df, interval == 0) %>%
filter(df, is.na(step))
filter(df, is.na(df$step))
filter(df, interval == 0) %>%
filter(is.na(df$steps))
filter(df, interval == 0) %>%
filter(is.na(steps))
?spread
library(tidyr)
?spread
replace_na(df, replace = list(tmp$mean(steps, na.rm = T)))
tmp$mean(steps, na.rm = T)
replace_na(df, replace = list(tmp$'mean(steps, na.rm = T')))
replace_na(df, replace = list(tmp$'mean(steps, na.rm = T)'))
new <- replace_na(df, replace = list(tmp$'mean(steps, na.rm = T)'))
summary(new)
?replace_na
new <- replace_na(df, replace = list(steps = tmp$'mean(steps, na.rm = T)'))
summary(new)
head(new)
tail(new)
setwd("~/R/course5/RepData_PeerAssessment1")
replace_na(df, replace = list(steps = tmp$'mean(steps, na.rm = T)')) %>%
write.csv("padded.csv")
?write.csv
replace_na(df, replace = list(steps = tmp$'mean(steps, na.rm = T)')) %>%
write.csv("padded.csv", row.names = F)
hist(summarize(group_by(new, date), sum(steps)))
group_by(new, date)
png("instructions_fig/plot3.png", width = 480, height = 480)
aggregate(steps ~ date, FUN = sum, data = new) %>%
hist()
dev.off()
summary(new)
summary(aggregate(steps ~ date, FUN = sum, data = new))
aggregate(steps ~ date, FUN = sum, data = new)
png("instructions_fig/plot3.png", width = 480, height = 480)
tmp <- aggregate(steps ~ date, FUN = sum, data = new)
hist(tmp$steps)
dev.off()
?weekdays
weekdays(tmp)
weekdays(tmp$date)
weekdays(is.posixt(tmp$date))
library(lubridate)
ymd(tmp$date)
wday(tmp$date)
weekdays(ymd(tmp$date))
?mutate
mutate(tmp, weekdays = weekdays(ymd(tmp$date)))
mutate(tmp, weekdays = weekdays(ymd(tmp$date))) %>%
sub("Sunday", "weekend") %>%
sub("Saturday", "weekend")
?sub
mutate(tmp, weekdays = weekdays(ymd(tmp$date))) %>%
sub("Sunday", "weekend", str)
mutate(tmp, weekdays = weekdays(ymd(tmp$date)))[gsub("S","weekday")]
mutate(tmp, weekdays = weekdays(ymd(tmp$date)))[gsub("S",weekdays <- mutate(tmp, weekdays = weekdays(ymd(tmp$date)))
)
)
weekdays <- mutate(tmp, weekdays = weekdays(ymd(tmp$date)))
gsub("S", "weekend", weekdays)
weekdays[gsub("S", "weekend", weekdays)]
wday(tmp$date)
mutate(tmp, weekdays = wday(tmp$date))
mutate(tmp, weekdays = wday(tmp$date)) %>%
subset(weekdays == 2:6)
mutate(tmp, weekdays = wday(tmp$date)) %>%
subset(weekdays = 2:6)
mutate(tmp, weekdays = wday(tmp$date))[weekdays == 2:6]
mutate(tmp, weekdays = wday(tmp$date))$weekdays == 2:6
?summarize
mutate(tmp, weekdays = wday(tmp$date)) %>%
sub("1", "weekend")
sub("1")
mutate(tmp, weekdays = wday(tmp$date)) %>%
sub("1")
mutate(tmp, weekdays = wday(tmp$date)) %>%
sub("1", "E")
w <- mutate(tmp, weekdays = wday(tmp$date))
w
sub('1', 'E', w)
sub('1', 'E', w$weekdays)
sub('1', 'weekend', w)
sub('1', 'weekend', w$weekdays)
wday(tmp$date)
wday(tmp$date) %wday(tmp$date) %>%
sub('1', 'weekend')
sub('1', 'weekend', wday(tmp$date))
sub('7', 'weekend',
sub('1', 'weekend', wday(tmp$date)))
sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend', wday(tmp$date))))))))
x <- sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend', wday(tmp$date))))))))
right_join(tmp, x)
x <- data.table()
x
x <- sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend', wday(tmp$date))))))))
?"data.table"
data.table(x)
data.table(weekdays = x)
data.table(weekdays = x)data.table(weekdays =
sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend', wday(tmp$date))))))))
)
x <- sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend',
wday(tmp$date))))))))
data.table(weekdays = x)
right_join(tmp, x)
class(x)
right_join(tmp, data.table(weekdays = x))
t <- data.table(weekdays = x)
right_join(tmp, y)
right_join(tmp, t)
bind_cols(tmp, t)
x <- sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend',
wday(new$date))))))))
bind_cols(new, data.table(weekdays = x))
weekdays <- bind_cols(new, data.table(weekdays = x))
par(mfrow = c(1,2))
plot(filter(new, weekdays == "weekday") %>%summarize(group_by(new, interval), mean(steps)
)
library(knitr)
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
