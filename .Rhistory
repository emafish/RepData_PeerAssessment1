source("rankall.R")
rankall("heart failure"), 10
rankall("heart failure")
source("rankall.R")
rankall("heart failure")
source("rankall.R")
source("rankall.R")
rankall("heart failure")
submit()
library(datasets)
data(iris)
?iris
iris
mean(iris[1])
mean(iris)
?mean
iris
subset(iris, iris$Species == "virginica" )
mean(subset(iris, iris$Species == "virginica" )[1])
a <- subset(iris, iris$Species == "virginica" )
mean(a$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
?abs
a <- sapply(split(mtcars$hp, mtcars$cyl), mean)
a[1]
abs(a[1] - a[3])
debug(ls)
debug(ls)
ls
ls
apply(iris[, 1:4], 2, mean)
?mtcars
a <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(a[1] - a[3])
Q
set.seed(1)
rpois(5,2)
library(datasets)
rprof()
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
set.seed(1)
rpois(5,2)
y <- 5
x1 <- 3
x2 <- 2
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
x1 <- rnorm(10,0,1)
x2 <- rnorm(20,0,1)
fit <- lm(y ~ x1 + x2)
x1 <- 3
fit <- lm(y ~ x1 + x2)
x2 <- 2
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
a <- matrix(c(1,2,3,4), nrow = 2, ncol =2)
source("~/R/cachematrix.R")
makeCacheMatrix(a)
a
a <- matrix(c(1,3,2,4), nrow = 2, ncol =2)
a
makeCacheMatrix(a)
solve(a)
make <- makeCacheMatrix(a)
cacheSolve(make)
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(make)
cacheSolve(b)
source("~/R/clean_cache_matrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix1(a)
cacheSolve1(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
inverse(a)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/withExample.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix2(a)
cacheSolve2(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
source("~/R/cachematrix.R")
a<-matrix(1:4,2,2)
b<-makeCacheMatrix(a)
cacheSolve(b)
a
b
b<-makeCacheMatrix2(a)
b
source("~/R/cachematrix.R")
a
b<-makeCacheMatrix(a)
b
source("~/R/cachematrix.R")
b<-makeCacheMatrix(a)
b
source("~/R/cachematrix.R")
a <- matrix(c(1,2,3,4), 2, 2)
a
q <- makeCacheMatrix(a)
q
source("~/R/cachematrix.R")
q <- makeCacheMatrix(a)
q
source("~/R/cachematrix.R")
q <- makeCacheMatrix(a)
q
?select
library(dplyr)
?select
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
q()
library(swirl)
swirl()
install.packages("Rcpp")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
library(swirl)
swirl()
library(dplyr)
bye
q
0
bye
info()
bye()
swirl()
bye()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, key = sex_class, value = count)
gather(students2, key = sex_class, value = count, -grade)
students2
res <- gather(students2, key = sex_class, value = count, -grade)
res
?separate
separate(res, col = sex_class, into = c(sex, class))
separate(res, col = sex_class, into = c("sex", "class"))
?chain
submit()
swirl()
submit(manual = T)
source("script1.R")
source("script1.R")
source("script1")
getwd
getwd()
# out ?chain, which will bring up the relevant documentation.
# You can also look at the Examples section at the bottom
# of ?gather and ?separate.
#
# The main idea is that the result to the left of %>%
# takes the place of the first argument of the function to
# the right. Therefore, you OMIT THE FIRST ARGUMENT to each
# function.
#
students2 %>%
gather( sex_class, count, -grade) %>%
separate( sex_class, c("sex", "class")) %>%
print
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
print
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
source('/var/folders/f_/rqqgwtdj7lb1cjssw93qxl140000gs/T//RtmpZdJm4Z/script1.R')
swirl()
submit
submit()
swirl()
bye()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd(192012)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_gms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours =8, minutes = 34)
this_moment
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours + 17, minutes + 34)
depart <- update(depart, hours = hours + 17, minutes + 34)
depart <- update(depart, hours = hours(depart) + 17, minutes = minutes(depart) 34)
depart <- update(depart, hours = hours(depart) + 17, minutes = minutes(depart) +34)
?update
depart <- update(depart, hours = 19 + 17, minutes = 32 +34)
depart <- update(depart, hours =  17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz("Asia/Hong_King")
with_tz(arrive, "Asia/Hong_King")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), "Asia/Singapore")
last_time <- with_tz(mdy("June 17, 2008"), "Singapore")
last_time <- with_tz(mdy("June 17, 2008", "Singapore"), "Asia/Hong_Kong")
last_time <- with_tz(mdy("June 17, 2008", tz = "Singapore"), "Asia/Hong_Kong")
last_time <- with_tz(mdy("June 17, 2008", tz = "Singapore"))
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
submit()
?submit
students3
?gather
submit
submit()
?submit
swirl()
?submit
?submit
students3
?submit
?submit
?submit
?submit
?submit
?spread
?submit
?spread
?submit
?spread
?submit
?submit
?spread
?submit
?submit
?submit
?submit
?submit
extract_numeric("class5")
?mutate
?submit
students4
?submit
?submit
?submit
?submit
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
?submit
?separate
sat %>%
select(-contains(total)) %>%
gather(part_sex, count, -score_range) %>%
print()
sat %>%
select(-contains(total)) %>%
print
?select
sat %>%
select(-contains(_total)) %>%
sat %>%
select(-contains("total")) %>%
print
?submit
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
print()
?separate
?submit
?submit
?group_by
?submit
install.packages(“onion”)
require(onion)
data(bunny)
p3d(bunny,theta=3,phi=104,box=FALSE)
install.packages('onion')
library(onion)
data("bunny")
p3d(bunny,theta=3,phi=104,box=FALSE)
library(swirl)
swirl
swirl()
quantil(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, pack_sum$count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrang(top_counts, count)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, des(count)
)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
unique(quantile(pack_sum$count, probs = 0.99))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
swirl()
?submit
?submit
?submit
View(result3)
select(1:4) %>%
print
cran
names(cran)
select(-1:3, -5:7, -9) %>%
print
select(ip_id, country, package, size) %>%
print
select(cran, 1:3)
select(cran, X)
select(cran, X, ip_id)
cran %>%
select(ip_id, country, package, size) %>%
print
print
# The call to print() at the end of the chain is optional,
# but necessary if you want your results printed to the
# console. Note that since there are no additional arguments
# to print(), you can leave off the parentheses after
# to print(), you can leave off the parentheses after
# the function name. This is a convenient feature of the %>%
# operator.
cran %>%
select(ip_id, country, package, size) %>%
print
?submit
?submit
?submit
?submit
exit
bye
bye()
library(knitr)
setwd("~/R/course5/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
total_steps
df
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
setwd("~/R/course5")
knit2html("PA1_template.Rmd")
knit2html("RepData_PeerAssessment1/PA1_template.Rmd")
knit2html("RepData_PeerAssessment1/PA1_template.Rmd")
setwd("~/R/course5/RepData_PeerAssessment1")
knit2html("RepData_PeerAssessment1/PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
install.packages(shiny)
install.packages("shiny")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
total_steps
renderPlot({
total_steps <- aggregate(steps ~ date, FUN = sum, data = df)
hist(total_steps$steps)
})
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
renderPlot({
total_steps <- aggregate(steps ~ date, FUN = sum, data = df)
hist(total_steps$steps)
})
tmp <- summarize(group_by(df, interval), mean(steps, na.rm = T))
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
tmp <- aggregate(steps ~ date, FUN = sum, data = new)
new <- replace_na(df, replace = list(steps = tmp$'mean(steps, na.rm = T)'))
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
tmp <- summarize(group_by(df, interval), mean(steps, na.rm = T))
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
tmp <- summarize(group_by(df, interval), mean(steps, na.rm = T))
knit2html("PA1_template.Rmd")
weekday <- filter(new, weekdays == "weekday")
new
head(new)
library(lubridate)
x <- sub('2', 'weekday',
sub('3', 'weekday',
sub('4', 'weekday',
sub('5', 'weekday',
sub('6', 'weekday',
sub('7', 'weekend',
sub('1', 'weekend',
wday(new$date))))))))
weekdays <- bind_cols(new, data.table(weekdays = x))
head(weekdays)
group_by(weekdays,weekdays)
knit2html("PA1_template.Rmd")
group1 <- filter(weekdays, weekdays == "weekday")
head(group1)
summary(group1)
unique(group1$weekdays)
knit2html("PA1_template.Rmd")
group2 <- filter(weekdays, weekdays == "weekend")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
library(xyplot)
xyplot()
install.packages("xyplot")
library(lattice)
knit2html("PA1_template.Rmd")
library(reshape2)
knit2html("PA1_template.Rmd")
